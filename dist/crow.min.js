/*Crow Client v1.0.8*/
(function(factory) {
    
    // Establish the root object, window (self) in the browser, or global on the server.
    // We use self instead of window for WebWorker support.
    var root = (typeof self == 'object' && self.self === self && self) ||
        (typeof module == 'object' && module);

    // Set up crow appropriately for the environment. Start with AMD.
    if (typeof define === 'function' && define.amd) {
      define('crow', ['exports'], function(exports) {
        // Export global even in AMD case in case this script is loaded with
        // others that may still expect a global crow.
        root.crow = factory();
        // return crow for correct AMD use
        return root.crow;
      });

      // Next for Node.js or CommonJS.
    } else if (typeof exports !== 'undefined') {
        root.exports = factory();
      // Finally, as a browser global.
    } else {
      root.crow = factory();
    }

  })(function() {


"use strict";var request=function(a,b,c,d){return"undefined"!=typeof XMLHttpRequest?function(a,b){var c=new XMLHttpRequest;c.on("error",function(a){console.error("Error connecting to woodpecker",a)}),c.open("POST",a),c.setRequestHeader("Content-Type","application/json"),c.send(JSON.stringify(b))}(a,b):function(a,b){var e=require("url"),f=e.parse(a),g=require("https:"===f.protocol?"https":"http"),h={host:f.hostname,protocol:f.protocol,port:f.port,path:f.path,headers:{"Content-Type":"application/json"},method:"POST"},i=g.request(h);i.on("response",function(d){c&&"function"==typeof c&&c({statusCode:d.statusCode,statusMessage:d.statusMessage,uri:a,body:b})}),i.on("error",function(a){d&&"function"==typeof d?(a.message+=" | Unable to send message: "+JSON.stringify(b),d(a)):console.error(a)}),i.write(JSON.stringify(b)),i.end()}(a,b)},request,_url,_application,_onSuccess,_onFailure,_devMode=!1,crow=function(a){if(!_url&&!_devMode)throw new Error("set the url for crow with crow.setUrl(<url>)");if(!_application&&!_devMode)throw new Error("set the application for crow with crow.setApplication(<application>)");a||console.warn("no log level specified. Defaulting to info");var b=Array.from(arguments).slice(1).reduce(function(a,b){return"object"!=typeof b?String.prototype.concat(a," ",b):String.prototype.concat(a," ",JSON.stringify(b,null,0))},"");if(!b)throw new Error("log must contain a message");_devMode||request(_url,{application:_application,level:a,message:b},_onSuccess,_onFailure);var c=a.toUpperCase()+" - "+b;switch(a){case"fatal":case"error":console.error(c);break;case"warn":console.warn(c);break;case"info":console.info(c);break;default:console.log(c)}};crow.setUrl=function(a){_url=a},crow.setApplication=function(a){_application=a},crow.setDevMode=function(a){if("boolean"!=typeof a)return void console.warn("setDevMode accepts a boolean value only. Leaving at default of false.");a&&console.warn("Warning: Crow has been set to dev mode. Logs will not be sent to woodpecker, and will only be logged to the console. This is your only warning."),_devMode=a},crow.debug=function(){crow("debug",arguments)},crow.info=function(){crow("info",arguments)},crow.log=crow.info,crow.warn=function(){crow("warn",arguments)},crow.error=function(){crow("error",arguments)},crow.fatal=function(){crow("fatal",arguments)},Object.defineProperty(crow,"onSuccess",{set:function(a){_onSuccess=a}}),Object.defineProperty(crow,"onFailure",{set:function(a){_onFailure=a}});
    return crow;
  });